function [v] = MG_beam2(setup)% >> v = MG_beam2(setup). A function which returns the normalized velocity% amplitude, v, due to a planar or spherically focused piston transducer % radiating obliquely through a curved fluid-solid or a smooth solid-solid % interface where the plane of incidence must be aligned with one of the % principal axes of the curved surface. The input argument setup is a % MATLAB structure that is generated by the MATLAB script parameters and % contains all of the input parameters needed to define a given inspection.% This is a multi-Gaussian beam model that uses the 15 optimized % coefficients of Wen and Breazeale to calculate the wave field. % Those coefficients are returned by the MATLAB function gauss_c15.% NOTE: the PROPAGATION PHASE TERM exp(i*k1.*D +i*k2.*y3)% IS NOT INCLUDED IN THIS MODEL. To include it, see comments given within% the function.% get setup parametersf = setup.f;			    %frequency or frequencies (MHz)type1 = setup.type1;        % wave type in medium onetype2 = setup.type2;		% wave type in medium twoint = setup.int;           % interface type	a = setup.trans.d/2;		% transducer radius (mm)Fl = setup.trans.fl;		% transducer focal length (mm) D = setup.geom.D;		    % water path length (mm)y3 = setup.geom.y3;         % path length in solid (mm)y1 =setup.geom.y1;	        % distance (mm) from ray axis in POI y2 = setup.geom.y2;			% distance (mm) perpendicular to the POIRx = setup.geom.R1;			% interface radius of curvature (mm) in POIRy =setup.geom.R2;			% interface radius of curvature (mm) out of POIiang = setup.geom.i_ang;	% incident angle (deg)d1 = setup.matl.d1;			% density (fluid)d2 =setup.matl.d2;		    % density (solid)cp1 = setup.matl.cp1;		% compressional wave speed -fluid  (m/sec)cs1 = setup.matl.cs1;cp2 = setup.matl.cp2;		% compressional wave speed -solid (m/sec)cs2 = setup.matl.cs2;		% shear wave speed -solid (m/sec)[A, B] = gauss_c15;	% Wen and Breazeale coefficients (15)% determine appropriate wave speeds to use in the two mediaif strcmp(type1, 'p')    c1 =cp1;elseif strcmp(type1, 's')    c1 = cs1;else    error('wrong wave type (must be p or s) ')endif strcmp(type2, 'p')    c2 =cp2;elseif strcmp(type2, 's')    c2 = cs2;else    error('wrong wave type (must be p or s)')end% calculate appropriate transmission coefficient for fluid-solid or% solid-solid interface in smooth contact.if strcmp(int, 'fs')    T = fluid_solid(iang, d1, d2, cp1, cp2, cs2);	elseif strcmp(int, 'ss')    T = solid_f_solid(iang, d1, d2, cp1, cs1, cp2, cs2); else    error('wrong interface type (must be fs or ss)')end% parameters appearing in beam modelcosi = cos(pi*iang/180);		  % cosine of incident anglesinr = (c2/c1)*sin(pi*iang/180);  % sine of trans. angle from Snell's lawif sinr >= 1						   error('Beyond the Critical angle') % no trans. wave of given wave typeelse   cosr = sqrt( 1 - sinr^2);end    h11 = 1/Rx;  %curvature-x2   h22 = 1/Ry;  %curvature-y2zr = eps*(f == 0) + 1000*pi*(a^2)*f./c1; % "Rayleigh" distance k1 = 2*pi*1000*f./c1;						% wave number in medium 1k2 = 2*pi*1000*f./c2;                       % wave number in medium 2%initialize the velocity, v,  which is to be returned by the functionv = 0;% multi-Gaussian beam model  NOTE: the PHASE TERM exp(i*k1.*D +i*k2.*y3)% IS MISSING IN THIS MODEL, but can be easily added back in. This term% produces a time delay t = 1000*D./c1 + 1000*y3./c2  microseconds if % (D, y3) are in mm and (c1, c2) are in m/sec.for j = 1:15				% form up multi-Gaussian beam model with                            % 15 Wen and Breazeale coefficients b =B(j) + 1i*zr./Fl;		% modify coefficients for focused probe						    % Fl = inf for planar probe						K1 = (c2*cosi/c1 - cosr)*h11/cosr^2;K2 = (c2*cosi/c1 - cosr)*h22;m1 = (c2*cosi^2/(c1*cosr^2)).*(1i*b./zr)./(1i*b.*D./zr +1)+ K1;m2 = (c2/c1).*(1i*b./zr)./(1i*b.*D./zr +1)+ K2;m11 =  m1./(m1.*y3 +1);m22 = m2./(m2.*y3 + 1);   t1 = A(j)./(1 + (1i.*b./zr).*D);   t2 = t1.*T.*(1./(sqrt(m1.*y3 +1))).*(1./(sqrt(m2.*y3 +1)));   v = v + t2.*exp(1i.*(k2./2).*(m11.*(y1.^2) + m22.*(y2.^2)));end